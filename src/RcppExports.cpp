// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cppIntersection
std::vector<int> cppIntersection(const IntegerVector& A, const IntegerVector& B);
RcppExport SEXP _dlmtree_cppIntersection(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(cppIntersection(A, B));
    return rcpp_result_gen;
END_RCPP
}
// dlmtreeGPFixedGaussian
Rcpp::List dlmtreeGPFixedGaussian(const Rcpp::List model);
RcppExport SEXP _dlmtree_dlmtreeGPFixedGaussian(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(dlmtreeGPFixedGaussian(model));
    return rcpp_result_gen;
END_RCPP
}
// dlmtreeGPGaussian
Rcpp::List dlmtreeGPGaussian(const Rcpp::List model);
RcppExport SEXP _dlmtree_dlmtreeGPGaussian(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(dlmtreeGPGaussian(model));
    return rcpp_result_gen;
END_RCPP
}
// dlmtreeHDLMGaussian
Rcpp::List dlmtreeHDLMGaussian(const Rcpp::List model);
RcppExport SEXP _dlmtree_dlmtreeHDLMGaussian(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(dlmtreeHDLMGaussian(model));
    return rcpp_result_gen;
END_RCPP
}
// dlmtreeHDLMMGaussian
Rcpp::List dlmtreeHDLMMGaussian(const Rcpp::List model);
RcppExport SEXP _dlmtree_dlmtreeHDLMMGaussian(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(dlmtreeHDLMMGaussian(model));
    return rcpp_result_gen;
END_RCPP
}
// dlmtreeTDLMFixedGaussian
Rcpp::List dlmtreeTDLMFixedGaussian(const Rcpp::List model);
RcppExport SEXP _dlmtree_dlmtreeTDLMFixedGaussian(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(dlmtreeTDLMFixedGaussian(model));
    return rcpp_result_gen;
END_RCPP
}
// dlmtreeTDLMNestedGaussian
Rcpp::List dlmtreeTDLMNestedGaussian(const Rcpp::List model);
RcppExport SEXP _dlmtree_dlmtreeTDLMNestedGaussian(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(dlmtreeTDLMNestedGaussian(model));
    return rcpp_result_gen;
END_RCPP
}
// dlmtreeTDLM_cpp
Rcpp::List dlmtreeTDLM_cpp(const Rcpp::List model);
RcppExport SEXP _dlmtree_dlmtreeTDLM_cpp(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(dlmtreeTDLM_cpp(model));
    return rcpp_result_gen;
END_RCPP
}
// dlnmEst
SEXP dlnmEst(arma::dmat dlnm, arma::dvec predAt, int nlags, int nsamp, double center, double se);
RcppExport SEXP _dlmtree_dlnmEst(SEXP dlnmSEXP, SEXP predAtSEXP, SEXP nlagsSEXP, SEXP nsampSEXP, SEXP centerSEXP, SEXP seSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::dmat >::type dlnm(dlnmSEXP);
    Rcpp::traits::input_parameter< arma::dvec >::type predAt(predAtSEXP);
    Rcpp::traits::input_parameter< int >::type nlags(nlagsSEXP);
    Rcpp::traits::input_parameter< int >::type nsamp(nsampSEXP);
    Rcpp::traits::input_parameter< double >::type center(centerSEXP);
    Rcpp::traits::input_parameter< double >::type se(seSEXP);
    rcpp_result_gen = Rcpp::wrap(dlnmEst(dlnm, predAt, nlags, nsamp, center, se));
    return rcpp_result_gen;
END_RCPP
}
// splitPIP
arma::mat splitPIP(arma::dmat dlnm, int nlags, int niter);
RcppExport SEXP _dlmtree_splitPIP(SEXP dlnmSEXP, SEXP nlagsSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::dmat >::type dlnm(dlnmSEXP);
    Rcpp::traits::input_parameter< int >::type nlags(nlagsSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    rcpp_result_gen = Rcpp::wrap(splitPIP(dlnm, nlags, niter));
    return rcpp_result_gen;
END_RCPP
}
// dlnmPLEst
SEXP dlnmPLEst(arma::dmat dlnm, arma::dvec predAt, int nlags, int nsamp, double center);
RcppExport SEXP _dlmtree_dlnmPLEst(SEXP dlnmSEXP, SEXP predAtSEXP, SEXP nlagsSEXP, SEXP nsampSEXP, SEXP centerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::dmat >::type dlnm(dlnmSEXP);
    Rcpp::traits::input_parameter< arma::dvec >::type predAt(predAtSEXP);
    Rcpp::traits::input_parameter< int >::type nlags(nlagsSEXP);
    Rcpp::traits::input_parameter< int >::type nsamp(nsampSEXP);
    Rcpp::traits::input_parameter< double >::type center(centerSEXP);
    rcpp_result_gen = Rcpp::wrap(dlnmPLEst(dlnm, predAt, nlags, nsamp, center));
    return rcpp_result_gen;
END_RCPP
}
// dlmEst
SEXP dlmEst(arma::dmat dlm, int nlags, int nsamp);
RcppExport SEXP _dlmtree_dlmEst(SEXP dlmSEXP, SEXP nlagsSEXP, SEXP nsampSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::dmat >::type dlm(dlmSEXP);
    Rcpp::traits::input_parameter< int >::type nlags(nlagsSEXP);
    Rcpp::traits::input_parameter< int >::type nsamp(nsampSEXP);
    rcpp_result_gen = Rcpp::wrap(dlmEst(dlm, nlags, nsamp));
    return rcpp_result_gen;
END_RCPP
}
// mixEst
SEXP mixEst(arma::dmat dlm, int nlags, int nsamp);
RcppExport SEXP _dlmtree_mixEst(SEXP dlmSEXP, SEXP nlagsSEXP, SEXP nsampSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::dmat >::type dlm(dlmSEXP);
    Rcpp::traits::input_parameter< int >::type nlags(nlagsSEXP);
    Rcpp::traits::input_parameter< int >::type nsamp(nsampSEXP);
    rcpp_result_gen = Rcpp::wrap(mixEst(dlm, nlags, nsamp));
    return rcpp_result_gen;
END_RCPP
}
// monotdlnm_Cpp
Rcpp::List monotdlnm_Cpp(const Rcpp::List model);
RcppExport SEXP _dlmtree_monotdlnm_Cpp(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(monotdlnm_Cpp(model));
    return rcpp_result_gen;
END_RCPP
}
// zeroToInfNormCDF
double zeroToInfNormCDF(Eigen::VectorXd mu, Eigen::MatrixXd sigma);
RcppExport SEXP _dlmtree_zeroToInfNormCDF(SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(zeroToInfNormCDF(mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// rtmvnorm
Eigen::VectorXd rtmvnorm(Eigen::VectorXd mu, Eigen::MatrixXd sigma, int iter);
RcppExport SEXP _dlmtree_rtmvnorm(SEXP muSEXP, SEXP sigmaSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(rtmvnorm(mu, sigma, iter));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_pgdraw
Eigen::VectorXd rcpp_pgdraw(Eigen::VectorXd b, Eigen::VectorXd z);
RcppExport SEXP _dlmtree_rcpp_pgdraw(SEXP bSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_pgdraw(b, z));
    return rcpp_result_gen;
END_RCPP
}
// tdlmm_Cpp
Rcpp::List tdlmm_Cpp(const Rcpp::List model);
RcppExport SEXP _dlmtree_tdlmm_Cpp(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(tdlmm_Cpp(model));
    return rcpp_result_gen;
END_RCPP
}
// tdlnm_Cpp
Rcpp::List tdlnm_Cpp(const Rcpp::List model);
RcppExport SEXP _dlmtree_tdlnm_Cpp(SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(tdlnm_Cpp(model));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dlmtree_cppIntersection", (DL_FUNC) &_dlmtree_cppIntersection, 2},
    {"_dlmtree_dlmtreeGPFixedGaussian", (DL_FUNC) &_dlmtree_dlmtreeGPFixedGaussian, 1},
    {"_dlmtree_dlmtreeGPGaussian", (DL_FUNC) &_dlmtree_dlmtreeGPGaussian, 1},
    {"_dlmtree_dlmtreeHDLMGaussian", (DL_FUNC) &_dlmtree_dlmtreeHDLMGaussian, 1},
    {"_dlmtree_dlmtreeHDLMMGaussian", (DL_FUNC) &_dlmtree_dlmtreeHDLMMGaussian, 1},
    {"_dlmtree_dlmtreeTDLMFixedGaussian", (DL_FUNC) &_dlmtree_dlmtreeTDLMFixedGaussian, 1},
    {"_dlmtree_dlmtreeTDLMNestedGaussian", (DL_FUNC) &_dlmtree_dlmtreeTDLMNestedGaussian, 1},
    {"_dlmtree_dlmtreeTDLM_cpp", (DL_FUNC) &_dlmtree_dlmtreeTDLM_cpp, 1},
    {"_dlmtree_dlnmEst", (DL_FUNC) &_dlmtree_dlnmEst, 6},
    {"_dlmtree_splitPIP", (DL_FUNC) &_dlmtree_splitPIP, 3},
    {"_dlmtree_dlnmPLEst", (DL_FUNC) &_dlmtree_dlnmPLEst, 5},
    {"_dlmtree_dlmEst", (DL_FUNC) &_dlmtree_dlmEst, 3},
    {"_dlmtree_mixEst", (DL_FUNC) &_dlmtree_mixEst, 3},
    {"_dlmtree_monotdlnm_Cpp", (DL_FUNC) &_dlmtree_monotdlnm_Cpp, 1},
    {"_dlmtree_zeroToInfNormCDF", (DL_FUNC) &_dlmtree_zeroToInfNormCDF, 2},
    {"_dlmtree_rtmvnorm", (DL_FUNC) &_dlmtree_rtmvnorm, 3},
    {"_dlmtree_rcpp_pgdraw", (DL_FUNC) &_dlmtree_rcpp_pgdraw, 2},
    {"_dlmtree_tdlmm_Cpp", (DL_FUNC) &_dlmtree_tdlmm_Cpp, 1},
    {"_dlmtree_tdlnm_Cpp", (DL_FUNC) &_dlmtree_tdlnm_Cpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_dlmtree(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
